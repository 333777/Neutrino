# Configuration file for SLB Reference Implementation
#
# This configuration document is divided into three components. Note that (in this simplified
# model) each component shares the same base configuration.
#  - http-server
#  - load-balancer
#  - daemon
#
#
neutrino {

  # Core engine settings
  core {}

  # Example initializers
  initializers = []


  # Configured channel listeners (interfaces)
  listeners = [
    # By default, we listen for HTTP port 8080
    {}
  ]


  # Pool List.
  # A a user should configure one or more pools for use by populating pool items
  pools = []


  # Default Listener Settings
  # These will be merged into individual listeners[]
  listener = {
    # Hostname or IP of interface to listen on.
    host = "0.0.0.0"

    # Port to listen on (required).
    # Must be greater than 1024 if not running as root (recommended)
    port = [8080]

    # Port alias
    # Used as backup in matching portmaps to downstream. This is not listened on.
    # If you want this port to be listened on as well as the primary, add it to the primary
    # 'port' list instead.
    port-alias = [80]

    # Protocol
    # One of ["http", "zmq"]
    protocol = "http"

    # Default Pipeline Class for interface
    pipeline-class = null

    # Swappable pool-selection mechanisim
    # One of [none, first, default, cname, or full.class.Name]
    pool-resolver = "none"

    # Interface-specific timeouts
    timeout = ${neutrino.timeout}

    # Channel Options
    #
    channel-options {

      # Force downstream channel to keep-alive or use client's keep-alive default
      force-keepalive = true

      # Event audit support
      #
      # Enabling this will capture timestamps of events within the pipeline and output
      # them when the threshold is passed.
      #  > audit-threshold = 5s
      audit-threshold = null
    }

  }


  # Default channel timeout settings
  #
  # These will be inherited (and can be overridden) in either VIP or Pool settings. This means the following
  # defaults are provided:
  #   ebay.neutrino.timeout
  #   ebay.neutrino.pool.timeout
  #   ebay.neutrino.pools[x].timeout
  #
  timeout = {

    # Timeout for read-idle; if a read has not been been made on this VIP's socket within this duration,
    # fail and close channel
    #   Default (30 seconds) closes channel if no reads or writes within 2 seconds
    #   Zero (0 seconds) disables timeout
    read-idle-timeout = 30s

    # Timeout for write-idle; if a read has not been been made on this VIP's socket within this duration,
    # fail and close channel
    #   Default (30 seconds) closes channel if no reads or writes within 2 seconds
    #   Zero (0 seconds) disables timeout
    write-idle-timeout = 30s

    # Timeout for individual request; if the request is open for longer than this duration, fail and close
    #   Default (30 seconds) closes request's channel after 30 seconds, regardless of usage
    #   Zero (0 seconds) disables timeout
    request-timeout = 30s

    # Timeout for HTTP session (VIP connection); if the channel is open for longer than this duration,
    # fail and close.
    #   Default (2 minutes) closes channel after 2 mins, regardless of usage
    #   Zero (0 seconds) disables timeout
    session-timeout = 2m

    # Timeout for writes; if a write has not been completed within this duration, fail and close channel
    #   Default (0 seconds) disables timeout
    write-timeout = 5s

    # Connection timeout; if applied to an outbound connection, will fail the connect() attempt if
    # not completed within this time
    #   Default (5 seconds) fails attempt after 5 seconds
    connection-timeout = 5s
  }


  # Default Pool Settings
  # These will be merged into individual pool settings
  pool {
    # Users should ensure they provide their own valid ID if more than one pool is configured
    id = "default"

    # Virtual Address (VIP) List
    # A user should configure one or more VIPs for use by populating pool items.
    addresses = [
      # Address Settings
      # These
    ]

    # Configured protocol
    protocol = "http"

    # Servers
    servers = []

    # Load balancer configurationbal
    #  One of [rr/round-robin, lc/least-connection, class-name]
    balancer = "round-robin"

    # Health monitoring
    health {
      # Default health monitoring is a status-200 monitor on root URL
      #monitor-class = "com.ebay.neutrino.health.Status200Monitor"
      url = "/"
    }


    # Pool-specific timeouts
    timeout = ${neutrino.timeout}
  }


  # Reporting/Metrics settings
  # These can be enabled by including the MetricsLifecycle component in the initializers
  metrics = [
    # Support for console logging
    { type = "console",  publish-period = 20m },

    # Support for graphite publishing
    # { type = "graphite", publish-period = 1m, host = "10.65.255.15", port = 2003 }
  ]

  supervisorThreadCount = 1

  workerThreadCount = 4

}